#! /usr/bin/python -Es
# Copyright (C) 2014 Red Hat
# AUTHOR: Dan Walsh <dwalsh@redhat.com>
# see file 'COPYING' for use and warranty information
#
# atom is a tool for managing Atomic Containers
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License as
#    published by the Free Software Foundation; either version 2 of
#    the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#                                        02111-1307  USA
#
#
import sys, os
import argparse
import gettext
import docker
import subprocess

PROGNAME="atom"
gettext.bindtextdomain(PROGNAME, "/usr/share/locale")
gettext.textdomain(PROGNAME)
try:
    gettext.install(PROGNAME,
                    unicode=True,
                    codeset = 'utf-8')
except TypeError:
    # Failover to python3 install
    gettext.install(PROGNAME,
                    codeset = 'utf-8')
except IOError:
    import builtins
    builtins.__dict__['_'] = str

class Atom:
    INSTALL_ARGS = ["/usr/bin/docker", "run",
                    "-t",
                    "-i",
                    "--rm", 
                    "--privileged",
                    "-v", "/:/host",
                    "--net=host",
                    "--ipc=host",
                    "--pid=host",
                    "-e", "CONFDIR=${CONFDIR}",
                    "-e", "LOGDIR=${LOGDIR}",
                    "-e", "DATADIR=${DATADIR}",
                    "--name", "NAME", 
                    "IMAGE", "/usr/bin/INSTALLCMD" ]

    RUN_ARGS = ["/usr/bin/docker", "run",
                "-t",
                "-i",
                "--rm", 
                "-e", "CONFDIR=${CONFDIR}",
                "-e", "LOGDIR=${LOGDIR}",
                "-e", "DATADIR=${DATADIR}",
                "--name", "NAME", 
                "IMAGE" ]
        
    def __init__(self):
        self.d = docker.Client()
        self.name = None
        self.image = None

    def set_args(self, args):
        self.args=args
        try:
            self.image = args.image
        except:
            pass
        try:
            self.command = args.command
        except:
            self.command = None
        try:
            self.name = args.name
        except:
            pass

        if not self.name:
            self.name = self.image

    def run(self):
        try:
            self.d.inspect_container(self.name)
            try:
                return subprocess.check_call(["docker", "exec", self.name] + self.command)
            except subprocess.CalledProcessError:
                try:
                    subprocess.check_call(["docker", "start", self.name])
                    return subprocess.check_call(["docker", "exec", self.name] + self.command)
                except subprocess.CalledProcessError:
                    pass
        except docker.errors.APIError:
            pass

        try:
            self.d.remove_container(self.name)
        except docker.errors.APIError:
            pass

        try:
            inspect = self.d.inspect_image(self.image)
        except docker.errors.APIError:
            self.d.pull(self.image, stream=True)
            inspect = self.d.inspect_image(self.image)
        
        args = self.RUN_ARGS + self.command
        
        if "LABEL" in inspect:
            if "RUN" in inspect[LABEL]:
                args = inspect[LABEL]["RUN"].Split() + self.command

        cmd = self.gen_cmd(args)
        print(cmd)
        return (subprocess.check_call(cmd, env={
            "CONFDIR": "/etc/%s" % self.name,
            "LOGDIR": "/var/log/%s" % self.name,
            "DATADIR":"/var/lib/%s" % self.name}, shell=True))

    def update(self):
        return subprocess.check_call(["docker", "pull", self.image])

    def remove(self):
        return subprocess.check_call(["docker", "rmi", self.image])

    def gen_cmd(self,cargs):
        args = []
        for c in cargs:
            if c == "IMAGE":
                args.append(self.image)
                continue
            if c == "NAME":
                args.append(self.name)
                continue
            args.append(c)
        return " ".join(args)
    
    def install(self):
        try:
            inspect = self.d.inspect_image(self.image)["Config"]
        except docker.errors.APIError:
            self.d.pull(self.image)
            inspect = self.d.inspect_image(self.image)

        args = self.INSTALL_ARGS

        if "Labels" in inspect:
            if "INSTALL" in inspect["Labels"]:
                args = inspect["Labels"]["INSTALL"].split()

        cmd = self.gen_cmd(args)
        print(cmd)
    
        return(subprocess.check_call(cmd, env={
            "CONFDIR": "/etc/%s" % self.name,
            "LOGDIR": "/var/log/%s" % self.name,
            "DATADIR":"/var/lib/%s" % self.name}, shell=True))

    def help(self):
        return _('Atomic Container Run Tool')
    
    def defaults(self):
        print(_("""
        Default configuration

        'atom run' attempts to read the LABEL RUN field in the container image,
        if this field does not exists atom run defaults to the following command:

 %s
        
        'atom install' attempts to read the LABEL INSTALL field in the container image,
        if this field does not exists atom install defaults to the following command:

 %s

        These defaults are suggested values for your container images.

        atom will replace the NAME and IMAGE fields with the name and image specified via the command,  NAME will be replaced with IMAGE if it is not specified.
        """ % (" ".join(self.RUN_ARGS), " ".join(self.INSTALL_ARGS))))
    
def SetFunc(function):
    class customAction(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, function)
    return customAction

if __name__ == '__main__':
    atom=Atom()
    parser = argparse.ArgumentParser(description=atom.help())
    subparser = parser.add_subparsers(help=_("commands"))
                                     
    runp = subparser.add_parser("run",help=_("Execute Image Run Method (Default)"))
    runp.set_defaults(func=atom.run)
    runp.add_argument("-n", "--name", dest="name",
                      default=None,
                      help=_("Name of container"))
    runp.add_argument("image", help=_("Container image"))
    runp.add_argument("command", nargs=argparse.REMAINDER, 
                      help=_("Command to execute within the container"))

    updatep = subparser.add_parser("update",help=_("Pull latest Image from repository"))
    updatep.set_defaults(func=atom.update)
    updatep.add_argument("image", help=_("Container image"))
    
    removep = subparser.add_parser("remove",help=_("Remove Image from system"))
    removep.set_defaults(func=atom.remove)
    removep.add_argument("image", help=_("Container image"))

    installp = subparser.add_parser("install",help=_("Execute Image Install Method"))
    installp.set_defaults(func=atom.install)
    installp.add_argument("image", help=_("Container image"))
    installp.add_argument("command", nargs=argparse.REMAINDER, 
                      help=_("Command to execute within the container"))
    installp.add_argument("-n", "--name", dest="name",
                      default=None,
                      help=_("Name of container"))
    defp = subparser.add_parser("defaults",help=_("List Default RUN/INSTALL Values"))
    defp.set_defaults(func=atom.defaults)
    try:
        args = parser.parse_args()
        atom.set_args(args)
        sys.exit(args.func())
    except ValueError as e:
        sys.stderr.write("%s: %s\n" % (e.__class__.__name__, str(e)))
        sys.exit(1)
    except IOError as e:
        sys.stderr.write("%s: %s\n" % (e.__class__.__name__, str(e)))
        sys.exit(1)
    except KeyboardInterrupt:
        sys.exit(0)
    except subprocess.CalledProcessError as e:
        sys.exit(e.returncode)
