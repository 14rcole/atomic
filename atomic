<<<<<<< .merge_file_od84KE
#!/bin/python -Es
||||||| .merge_file_5fZT6E
=======
#! /usr/bin/python -Es
>>>>>>> .merge_file_9IdcaF
# Copyright (C) 2014 Red Hat
# AUTHOR: Dan Walsh <dwalsh@redhat.com>
# see file 'COPYING' for use and warranty information
#
# atomic is a tool for managing Atomic Systems and Containers
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License as
#    published by the Free Software Foundation; either version 2 of
#    the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#                                        02111-1307  USA
#
#
import sys, os
import argparse
import gettext
import docker
import subprocess

PROGNAME="atomic"
gettext.bindtextdomain(PROGNAME, "/usr/share/locale")
gettext.textdomain(PROGNAME)
try:
    gettext.install(PROGNAME,
                    unicode=True,
                    codeset = 'utf-8')
except TypeError:
    # Failover to python3 install
    gettext.install(PROGNAME,
                    codeset = 'utf-8')
except IOError:
    import builtins
    builtins.__dict__['_'] = str

class Atomic:
    INSTALL_ARGS = ["/usr/bin/docker", "run",
                    "-t",
                    "-i",
                    "--rm",
                    "--privileged",
                    "-v", "/:/host",
                    "--net=host",
                    "--ipc=host",
                    "--pid=host",
                    "-e", "HOST=/host",
                    "-e", "NAME=NAME",
                    "-e", "IMAGE=IMAGE",
                    "-e", "CONFDIR=${CONFDIR}",
                    "-e", "LOGDIR=${LOGDIR}",
                    "-e", "DATADIR=${DATADIR}",
                    "--name", "NAME",
                    "IMAGE", "/usr/bin/INSTALLCMD" ]

    SPC_ARGS = ["/usr/bin/docker", "run",
                "-t",
                "-i",
                "--rm",
                "--privileged",
                "-v", "/:/host",
                "--net=host",
                "--ipc=host",
                "--pid=host",
                "-e", "HOST=/host",
                "-e", "NAME=NAME",
                "-e", "IMAGE=IMAGE",
                "-e", "CONFDIR=${CONFDIR}",
                "-e", "LOGDIR=${LOGDIR}",
                "-e", "DATADIR=${DATADIR}",
                "--name", "NAME",
                "IMAGE" ]

    RUN_ARGS = ["/usr/bin/docker", "run",
                "-t",
                "-i",
                "--rm",
<<<<<<< .merge_file_od84KE
                "-v", "${LOGDIR}:/var/log",
                "-v", "${DATADIR}:/var/lib",
||||||| .merge_file_5fZT6E
=======
                "-e", "CONFDIR=${CONFDIR}",
                "-e", "LOGDIR=${LOGDIR}",
                "-e", "DATADIR=${DATADIR}",
>>>>>>> .merge_file_9IdcaF
                "--name", "NAME",
                "IMAGE" ]

    def __init__(self):
        self.d = docker.Client()
        self.name = None
        self.image = None
        self.spc = False

    def set_args(self, args):
        self.args=args
        try:
            self.image = args.image
        except:
            pass
        try:
            self.command = args.command
        except:
            self.command = None

        try:
            self.spc = args.spc
        except:
            self.spc = False

        try:
            self.name = args.name
        except:
            pass

        if not self.name:
            self.name = self.image

    def run(self):
        try:
            self.d.inspect_container(self.name)
            try:
                return subprocess.check_call(["/usr/bin/docker", "exec", self.name] + self.command)
            except subprocess.CalledProcessError:
                try:
                    subprocess.check_call(["/usr/bin/docker", "start", self.name])
                    return subprocess.check_call(["/usr/bin/docker", "exec", self.name] + self.command)
                except subprocess.CalledProcessError:
                    pass
        except docker.errors.APIError:
            pass

        try:
            self.d.remove_container(self.name)
        except docker.errors.APIError:
            pass

        if self.spc:
            args = self.SPC_ARGS + self.command
        else:
            try:
                inspect = self.d.inspect_image(self.image)["Config"]
            except docker.errors.APIError:
                self.d.pull(self.image, stream=True)
                inspect = self.d.inspect_image(self.image)["Config"]

            args = self.RUN_ARGS + self.command

            if "Labels" in inspect:
<<<<<<< .merge_file_od84KE
                if inspect["Labels"] and "RUN" in inspect["Labels"]:
||||||| .merge_file_5fZT6E
=======
                if "RUN" in inspect["Labels"]:
>>>>>>> .merge_file_9IdcaF
                    args = inspect["Labels"]["RUN"].split() + self.command

        cmd = self.gen_cmd(args)
        print(cmd)
        return (subprocess.check_call(cmd, env={
            "CONFDIR": "/etc/%s" % self.name,
            "LOGDIR": "/var/log/%s" % self.name,
            "DATADIR":"/var/lib/%s" % self.name}, shell=True))

<<<<<<< .merge_file_od84KE
    def host(self):
        if self.args.rollback:
            return subprocess.check_call(["/usr/bin/rpm-ostree", "rollback"]+ self.command)
        if self.args.upgrade:
            return subprocess.check_call(["/usr/bin/rpm-ostree", "upgrade"]+ self.command)
        if self.args.status:
            return subprocess.check_call(["/usr/bin/rpm-ostree", "status"]+ self.command)
||||||| .merge_file_5fZT6E
=======
    def status(self):
        return subprocess.check_call(["/usr/bin/rpm-ostree", "status"] + self.command)

    def upgrade(self):
        return subprocess.check_call(["/usr/bin/rpm-ostree", "upgrade"] + self.command)

    def rollback(self):
        return subprocess.check_call(["/usr/bin/rpm-ostree", "rollback"]+ self.command)
>>>>>>> .merge_file_9IdcaF

    def update(self):
        return subprocess.check_call(["/usr/bin/docker", "pull", self.image])

<<<<<<< .merge_file_od84KE
    def uninstall(self):
        try: 
            inspect = self.d.inspect_container(self.name)["Config"]
            if "Labels" in inspect:
                if inspect["Labels"] and "UNINSTALL" in inspect["Labels"]:
                    args = inspect["Labels"]["UNINSTALL"].split()
                    cmd = self.gen_cmd(args)
                    print(cmd)
                    subprocess.check_call(cmd, env={
                        "CONFDIR": "/etc/%s" % self.name,
                        "LOGDIR": "/var/log/%s" % self.name,
                        "DATADIR":"/var/lib/%s" % self.name}, shell=True)
        except docker.errors.APIError:
            pass

        if self.name != self.image:
            return subprocess.check_call(["/usr/bin/docker", "rm", self.name])
        else:
            try: 
                self.d.remove_container(self.image)["Config"]
            except docker.errors.APIError:
                pass
            return subprocess.check_call(["/usr/bin/docker", "rmi", self.image])
            
||||||| .merge_file_5fZT6E
=======
    def remove(self):
        return subprocess.check_call(["/usr/bin/docker", "rmi", self.image])
>>>>>>> .merge_file_9IdcaF

    def gen_cmd(self,cargs):
        args = []
        for c in cargs:
            if c == "IMAGE":
                args.append(self.image)
                continue
            if c == "IMAGE=IMAGE":
                args.append("IMAGE=%s" % self.image)
                continue
            if c == "NAME=NAME":
                args.append("NAME=%s" % self.name)
                continue
            if c == "NAME":
                args.append(self.name)
                continue
            args.append(c)
        return " ".join(args)

    def install(self):
        try:
            inspect = self.d.inspect_image(self.image)["Config"]
        except docker.errors.APIError:
            self.d.pull(self.image)
            inspect = self.d.inspect_image(self.image)

        args = self.INSTALL_ARGS

        if "Labels" in inspect:
<<<<<<< .merge_file_od84KE
            if inspect["Labels"] and "INSTALL" in inspect["Labels"]:
||||||| .merge_file_5fZT6E
=======
            if "INSTALL" in inspect["Labels"]:
>>>>>>> .merge_file_9IdcaF
                args = inspect["Labels"]["INSTALL"].split()

<<<<<<< .merge_file_od84KE
                cmd = self.gen_cmd(args)
                print(cmd)
||||||| .merge_file_5fZT6E
=======
        cmd = self.gen_cmd(args)
        print(cmd)
>>>>>>> .merge_file_9IdcaF

<<<<<<< .merge_file_od84KE
            return(subprocess.check_call(cmd, env={
                "CONFDIR": "/etc/%s" % self.name,
                "LOGDIR": "/var/log/%s" % self.name,
                "DATADIR":"/var/lib/%s" % self.name}, shell=True))
||||||| .merge_file_5fZT6E
=======
        return(subprocess.check_call(cmd, env={
            "CONFDIR": "/etc/%s" % self.name,
            "LOGDIR": "/var/log/%s" % self.name,
            "DATADIR":"/var/lib/%s" % self.name}, shell=True))
>>>>>>> .merge_file_9IdcaF

    def help(self):
        if os.path.exists("/usr/bin/rpm-ostree"):
            return _('Atomic Management Tool')
        else:
            return _('Atomic Container Tool')
            

    def defaults(self):
        print(_("""
        Default configuration

        'atomic run' attempts to read the LABEL RUN field in the container image,
        if this field does not exists atom run defaults to the following command:

 %s

        'atomic install' attempts to read the LABEL INSTALL field in the container image,
        if this field does not exists atom install defaults to the following command:

 %s

        These defaults are suggested values for your container images.

        atomic will replace the NAME and IMAGE fields with the name and image specified via the command,  NAME will be replaced with IMAGE if it is not specified.
        """ % (" ".join(self.RUN_ARGS), " ".join(self.INSTALL_ARGS))))

def SetFunc(function):
    class customAction(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, function)
    return customAction

if __name__ == '__main__':
    atomic=Atomic()
    parser = argparse.ArgumentParser(description=atomic.help())
    subparser = parser.add_subparsers(help=_("Commands"))
    defp = subparser.add_parser("defaults",help=_("list default commands with which Atomic will RUN/INSTALL/UNINSTALL containers"))
    
    defp.set_defaults(func=atomic.defaults)

    if os.path.exists("/usr/bin/rpm-ostree"):
<<<<<<< .merge_file_od84KE
        hostp = subparser.add_parser("host",help=_("execute Atomic host commands"))
        hostp.set_defaults(func=atomic.host)
        group = hostp.add_mutually_exclusive_group(required=True)
        group.add_argument("--rollback", dest="rollback", default=False,
                           action="store_true",
                           help=_("revert Atomic to the previously booted tree"))
        group.add_argument("--status", dest="rollback", default=False,
                           action="store_true",
                           help=_("get the version of the booted Atomic system"""))
        group.add_argument("--upgrade", dest="upgrade", default=False,
                           action="store_true",
                           help=_("perform Atomic system upgrade"))
        hostp.add_argument("command", nargs=argparse.REMAINDER, help=_("additional options to pass to rpm-ostree"))


    installp = subparser.add_parser("install",help=_("execute container image install method"))
    installp.set_defaults(func=atomic.install)
    installp.add_argument("image", help=_("container image"))
    installp.add_argument("command", nargs=argparse.REMAINDER,
                      help=_("command to execute within the container"))
    installp.add_argument("-n", "--name", dest="name",
                      default=None,
                      help=_("name of container"))
    runp = subparser.add_parser("run",help=_("execute container image run method (default)"))
||||||| .merge_file_5fZT6E
=======
        upgradep = subparser.add_parser("upgrade",help=_("Perform Atomic System Upgrade"))
        upgradep.set_defaults(func=atomic.upgrade)
        upgradep.add_argument("command", nargs=argparse.REMAINDER, help=argparse.SUPPRESS)

        rollbackp = subparser.add_parser("rollback",help=_("Revert Atomic to the previously booted tree"))
        rollbackp.set_defaults(func=atomic.rollback)
        rollbackp.add_argument("command", nargs=argparse.REMAINDER, help=argparse.SUPPRESS)

        statusp = subparser.add_parser("status",help=_("""Get the version of the booted Atomic system"""))
        statusp.set_defaults(func=atomic.status)
        statusp.add_argument("command", nargs=argparse.REMAINDER, help=argparse.SUPPRESS)
        
    runp = subparser.add_parser("run",help=_("Execute Image Run Method (Default)"))
>>>>>>> .merge_file_9IdcaF
    runp.set_defaults(func=atomic.run)
    runp.add_argument("-n", "--name", dest="name",
                      default=None,
<<<<<<< .merge_file_od84KE
                      help=_("name of container"))
||||||| .merge_file_5fZT6E
=======
                      help=_("Name of container"))
>>>>>>> .merge_file_9IdcaF
    runp.add_argument("--spc",
                      default=False,
                      action="store_true",
<<<<<<< .merge_file_od84KE
                      help=_("use super privileged container mode"))
    runp.add_argument("image", help=_("container image"))
||||||| .merge_file_5fZT6E
=======
                      help=_("Use Super Privileged Container mode"))
    runp.add_argument("image", help=_("Container image"))
>>>>>>> .merge_file_9IdcaF
    runp.add_argument("command", nargs=argparse.REMAINDER,
<<<<<<< .merge_file_od84KE
                      help=_("command to execute within the container"))

    uninstallp = subparser.add_parser("uninstall",help=_("execute container image uninstall method"))
    uninstallp.set_defaults(func=atomic.uninstall)
    uninstallp.add_argument("-n", "--name", dest="name",
                            default=None,
                            help=_("name of container"))
    uninstallp.add_argument("image", help=_("container image"))
||||||| .merge_file_5fZT6E
=======
                      help=_("Command to execute within the container"))
>>>>>>> .merge_file_9IdcaF

<<<<<<< .merge_file_od84KE
    updatep = subparser.add_parser("update",help=_("pull latest container image from repository"))
||||||| .merge_file_5fZT6E
=======
    updatep = subparser.add_parser("update",help=_("Pull latest Image from repository"))
>>>>>>> .merge_file_9IdcaF
    updatep.set_defaults(func=atomic.update)
<<<<<<< .merge_file_od84KE
    updatep.add_argument("image", help=_("container image"))
||||||| .merge_file_5fZT6E
=======
    updatep.add_argument("image", help=_("Container image"))

    removep = subparser.add_parser("remove",help=_("Remove Image from system"))
    removep.set_defaults(func=atomic.remove)
    removep.add_argument("image", help=_("Container image"))

    installp = subparser.add_parser("install",help=_("Execute Image Install Method"))
    installp.set_defaults(func=atomic.install)
    installp.add_argument("image", help=_("Container image"))
    installp.add_argument("command", nargs=argparse.REMAINDER,
                      help=_("Command to execute within the container"))
    installp.add_argument("-n", "--name", dest="name",
                      default=None,
                      help=_("Name of container"))
    defp = subparser.add_parser("defaults",help=_("List default commands with which atomic will RUN/INSTALL/REMOVE containers"))
    
    defp.set_defaults(func=atomic.defaults)
>>>>>>> .merge_file_9IdcaF

    try:
        args = parser.parse_args()
        atomic.set_args(args)
        sys.exit(args.func())
    except ValueError as e:
        sys.stderr.write("%s: %s\n" % (e.__class__.__name__, str(e)))
        sys.exit(1)
    except IOError as e:
        sys.stderr.write("%s: %s\n" % (e.__class__.__name__, str(e)))
        sys.exit(1)
    except KeyboardInterrupt:
        sys.exit(0)
    except subprocess.CalledProcessError as e:
        sys.exit(e.returncode)
